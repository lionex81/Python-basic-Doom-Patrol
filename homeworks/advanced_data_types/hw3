
int_a = 55
str_b = 'cursor'
set_c = {1, 2, 3}
lst_d = [1, 2, 3]
dict_e = {'a': 1, 'b': 2, 'c': 3}
#1 Define the id of next variables:
print('\n\t#1')
print(id(int_a), id(str_b), id(set_c), id(lst_d), id(dict_e))

#2 Append 4 and 5 to the lst_d and define the id one more time.
print('\n\t#2')
lst_d.insert(3,4)
lst_d.insert(4,5)
print(f"{'id(lst_d) ='} {id(lst_d)}")

#3. Define the type of each object from step 1.
print('\n\t#3')
print(type(int_a), type(str_b), type(set_c), type(lst_d), type(dict_e))

#4*. Check the type of the objects by using isinstance.
print('\n\t#4')
print(isinstance(int_a, int), isinstance(str_b, str), isinstance(set_c, set), isinstance(lst_d, list),isinstance(dict_e, dict) )

#5. With .format and curly braces {}
print('\n\t#5')
print("Anna has {} apples and {} peaches.".format('5','7'))

#6. By passing index numbers into the curly braces.
print('\n\t#6')
print("Anna has {1} apples and {0} peaches.".format('5','7'))

#7. By using keyword arguments into the curly braces.
print('\n\t#7')
print("Anna has {first} apples and {second} peaches.".format(first='6',second='10'))

#8*. With indicators of field size (5 chars for the first and 3 for the second)
print('\n\t#8')
print("Anna has {0:5} apples and {1:3} peaches.".format(6,9))

#9. With f-strings and variables
var_1=5
var_2=6
print('\n\t#9')
print(f"Anna has {var_1} apples and {var_2} peaches.")

#10. With % operator
var_1='5'
var_2='6'
print('\n\t#10')
print("Anna has %s apples and % speaches." % (var_1,var_2))

#11*. With variable substitutions by name (hint: by using dict)
print('\n\t#11')
var_1='5'
var_2='6'
dict1 = {'first': var_1, 'second': var_2}
print("Anna has %(first)s apples and %(second)s peaches." % dict1)

#12. Convert (1) to list comprehension
print('\n\t#12')
lst_comp = [num**2 if num % 2 == 1 else num**4 for num in range(10)]
print(lst_comp)

#13 Convert (2) to regular for with if-else
print('\n\t#13')
lst = []
for num in range(10):
      if num % 2 == 0:
          lst.append(num // 2)
      else:
           lst.append(num*10)
print(lst)

#14. Convert (3) to dict comprehension.
print('\n\t#14')
dict_comp = {num: num**2 for num in range(1,11) if num % 2 == 1 }
print(dict_comp)

#15*. Convert (4) to dict comprehension.
print('\n\t#15')
dict_comp = {num: num**2 if num % 2 == 1  else num // 0.5 for num in range(1,11)}
print(dict_comp)

#16Convert (5) to regular for with if.
print('\n\t#16')
d = {}
for x in range(10):
    if x**3 % 4 == 0:
        d[x] = x ** 3
print(d)

#17*. Convert (6) to regular for with if-else.
print('\n\t#17')
d = {}
for x in range(10):
    if x**3 % 4 == 0:
        d[x] = x**3
    else:
        d[x] = x
print(d)

#18. Convert (7) to lambda function
print('\n\t#18')
lmb = lambda x, y: x if x < y else y
print(lmb(3,4))

#19*. Convert (8) to regular function
print('\n\t#19')
#foo = lambda x, y, z: z if y < x and x > z else y
def foo(x,y,z):
    if y<x and x>z:
        return z
    else:
        return y
print(foo(10,12,20))

#20. Sort lst_to_sort from min to max
print('\n\t#20')
lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
print(sorted(lst_to_sort))

#21. Sort lst_to_sort from max to min
print('\n\t#21')
lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
print(sorted(lst_to_sort, reverse=True))

#22. Use map and lambda to update the lst_to_sort by multiply each element by 2
print('\n\t#22')
lmb = lambda x: x*2
new_list = list(map(lmb, lst_to_sort))
print(new_list)

#23*. Raise each list number to the corresponding number on another list:
print('\n\t#23')
list_A = [2, 3, 4]
list_B = [5, 6, 7]
lmb = lambda x, y: x**y
new_list = list(map(lmb, list_A, list_B))
print(new_list)

#24. Use reduce and lambda to compute the numbers of a lst_to_sort.
print('\n\t#24')
import functools
def my_sum (a,b):
    result=a+b
    return(result)
foo = functools.reduce(my_sum, lst_to_sort)
print(foo)

#25 Use filter and lambda to filter the number of a lst_to_sort with elem % 2 == 1.
print('\n\t#25')
new_list = list(filter(lambda x: x%2==1, lst_to_sort))
print(new_list)

#26. Considering the range of values: b = range(-10, 10), use the function filter to return only negative numbers.
print('\n\t#26')
b = range(-10, 10)
negative = list(filter(lambda x: x<0, b))
print(negative)

#27*. Using the filter function, find the values that are common to the two lists:
print('\n\t#27')
list_1 = [1,2,3,5,7,9]
list_2 = [2,3,5,6,7,8]
intersect = list(filter(lambda x: x in list_1, list_2))
print(intersect)




